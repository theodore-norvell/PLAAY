<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Abstract Syntax and Static Cheking</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="playStyle.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Abstract Syntax</h1>
<p>Notation. Identifiers starting with lower case </p>
<h2>Classes</h2>
<p>Each class has a unique name, , and a finite set of field descriptions:</p>
<pre>   Class --&gt; class[Id]( Fd* Method )

[Changed Seq to Method.]</pre>
<p>Each field description is a VarDecl</p>
<pre>   Fd --&gt; VarDecl
</pre>
<p>  [Superclasses?]</p>
<h2>Types</h2>
<p>Types can be primitive, classes, or finite unions of types.</p>
<pre>   Type --&gt; booleanType | stringType | numberType | anyType | nullType | commType | altType( Type+ )
 | ClassType | methodType( Type+ )
    ClassType --&gt; classType[Id]</pre>
<p>A method type has a sequence of types as its children. The <strong>final</strong> of these is the return type. All the others are parameter types.</p>
<h2>Expressions</h2>
<h3>Literal expressions</h3>
<pre>   Exp --&gt; numberLiteral[val]</pre>
<p>val must be a string of one or more digits, possibly preceeded with a + or - sign. The value is a normalized string. For example, if val is 0123 the value is the string &quot;123&quot;. In theory, at least, every number is also a string.</p>
<pre>   Exp --&gt; <strong>true</strong> | <strong>false</strong></pre>
<p>The value is either the string &quot;true&quot; or the string &quot;false&quot;. </p>
<pre>   Exp --&gt; stringLiteral[val]</pre>
<p>The value is the string val.</p>
<pre>
   Exp --&gt; null</pre>
<h3>Variables</h3>
<pre>   Exp --&gt; Var
   Var --&gt; <strong>var</strong>[Id]</pre>
<h3>Dot</h3>
<pre>   Exp --&gt; dot[Id]( Exp) 
</pre>
<p>[Question: Should we have an analog to JavaScript's exp[exp] notation? like this:</p>
<pre>   Exp --&gt; dot2( Exp, Exp )</pre>
<p>  ]</p>
<h3>This</h3>
<pre>   Exp --&gt; <strong>this</strong>
</pre>
<h3>Calls</h3>
<pre>   Exp --&gt; callClosure( Exp0, Exp1, Exp2, ..., Exp<sub>n</sub> )
</pre>
<p>Here Exp0 should be a method.</p>
<p>Here Exp0 is the recipient. Finally a call to world object has a special syntax</p>
<pre>   Exp --&gt; callWorld[Id]( Exp0, Exp1, Exp2, ..., Exp<sub>n-1</sub> )
</pre>
<p>In this case, the children are all arguments.
</p>
<h3>Allocation</h3>
<pre>   Exp --&gt; <strong>new</strong>( ClassType, Exp1, Exp2, ..., Expn )

[Changed Type to ClassType.]</pre>
<h3>Method literals</h3>
<pre>   Exp --&gt; Method
   Method --&gt; <strong>lambda</strong>(Params<sub></sub>, OptType, Seq)
   Params --&gt; params(VarDecl* )
</pre>
<p>  The value of a method literal is a closure. (See <a href="Run-time-model.html">Run-time-model</a> for more information on closures.)</p>
<h3>Method literals for future implementation</h3>
<p>A short form of lambda omits replaces the params with an optional type</p>
<pre>   Method --&gt; <strong>shortLambda</strong>(OptType<sub></sub>, OptType, OptExp, Seq)</pre>
<p>The single parameter is implicitly named &quot;?&quot; and the name &quot;??&quot; refers to the paramter of the containing short lambda, etc. (i.e. deBruin numbering). The OptExp is a boolean guard expression, so that we can make partial functions. Also for the future, regular lambda should also have an optional guard. </p>
<pre>  Method --&gt; <strong>lambda</strong>(Params<sub></sub>, OptType, OptExp, Seq)</pre>
<p>The types of parameters missing explicit types may be imposed by context if the context is an application of some sort. (E.g. a switch statement.) This should apply&nbsp;to all forms of lambda.</p>
<h3>Control constructs</h3>
<pre>   Seq --&gt; seq( SeqMember, SeqMember, ... ) 
   SeqMember --&gt; Exp | VarDecl

   Exp --&gt; <strong>if(</strong> Exp, <strong></strong>Seq,<strong></strong> Seq)<strong></strong>
   Exp --&gt; <strong>while(</strong> Exp, Seq )<strong></strong>

   VarDecl --&gt; vardecl[c]( Var, OptType, OptExp )</pre>
<p>  (c is true or false. True means it is a constant declaration, while false means it is a location declaration.)</p>
<p>(For future implementation, Var will be replaced by Pattern&nbsp;or a restricted version of Pattern.)</p>
<pre>

OptExp --&gt; noExp | Exp</pre>
<p>OptTypes are optional types. If the type of a VarDecl is noType, then the checker will try to fill in the type.</p>
<pre>   OptType --&gt; noType | Type
</pre>
<h3>Control constructs for future implementation</h3>
<p>Note these are just ideas for implementation some day.</p>
<p>The switch expression</p>
<pre>   Exp --&gt; switch( Exp, Case, Case, ..., OptSeq)</pre>
<p>Each Case is an an expression which must be a function. The semantics is that Exp and all the Cases are evaluated&nbsp;all the cases are checked for applicability (by evaluating their guards and also by run-time type checking). If none of the cases is applicable, the final Seq is executed&nbsp;if present. If none of the cases is applicable and there is no final&nbsp;Seq, it is an error. Otherwise an abitrary applicable case is picked and evaluated.&nbsp;</p>
<p>Compile time type checking needs some thought, I think. It should be a&nbsp;compile time type error if there is no chance of a match. For example&nbsp;if Exp types as Num|Null, then a case with a parameter type of Bool should result in an error.&nbsp; It would also be good to have completeness checking when the type of Exp is an enumeration of some sort.</p>
<h3>Assignment</h3>
<pre>   Exp --&gt; assign( Exp, Exp )
</pre>
<h3>  Place holders</h3>
<p>Place holder expressions are used where expressions are required by the content model, but where there is no obvious candidate for a default value.</p>
<pre>   Exp --&gt; expPlaceHolder</pre>
<h1>Static Checking</h1>
<p>This section has been replaced with other other documentation on the type system and static checking.</p>
</body>
</html>
